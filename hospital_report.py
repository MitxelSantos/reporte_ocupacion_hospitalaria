#!/usr/bin/env python3
"""
Generador de Informes de Capacidad Hospitalaria - Departamento del Tolima
Estructura por Servicios y Niveles de Atenci√≥n

COLUMNAS PRINCIPALES:
- municipio_sede_prestador: Municipio del departamento
- nombre_prestador: Prestador de salud (puede tener varias sedes)
- nivel_de_atencion_prestador: Nivel de complejidad (I, II, III, IV)
- nombre_sede_prestador: Nombre de la sede espec√≠fica
- nombre_capacidad_instalada: Tipo de cama/camilla y secci√≥n
- cantidad_ci_TOTAL_REPS: Capacidad total
- total_ingresos_paciente_servicio: Pacientes ingresados (ocupaci√≥n)

Estructura: Tolima ‚Üí Ibagu√© ‚Üí Federico Lleras ‚Üí Otros Municipios

Desarrollado por: Ing. Jos√© Miguel Santos
Para: Secretar√≠a de Salud del Tolima
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import sys
import os
from pathlib import Path
import warnings
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak, Table, TableStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
from reportlab.pdfgen import canvas
import matplotlib.patches as mpatches

# Configurar warnings
warnings.filterwarnings('ignore')

# Configuraci√≥n de matplotlib
plt.style.use('default')
sns.set_palette("husl")

# Configuraci√≥n global
COLORS = {
    "primary": "#7D0F2B",     # Rojo institucional Tolima
    "secondary": "#F2A900",    # Amarillo dorado
    "accent": "#5A4214",       # Marr√≥n
    "success": "#509E2F",      # Verde
    "warning": "#F7941D",      # Naranja
    "danger": "#D32F2F",       # Rojo peligro
    "white": "#FFFFFF",        # Blanco
    "light_gray": "#F5F5F5",   # Gris claro
    "dark_gray": "#424242",    # Gris oscuro
}

# Umbrales de ocupaci√≥n
UMBRALES = {
    "critico": 90,      # ‚â•90% cr√≠tico
    "advertencia": 70,  # 70-89% advertencia
    "normal": 0         # <70% normal
}

class HospitalReportGenerator:
    """Generador de informes de capacidad hospitalaria optimizado por servicios y niveles."""
    
    def __init__(self):
        """Inicializar el generador de reportes."""
        self.df = None
        self.fecha_procesamiento = datetime.now()
        self.mapeo_servicios = self._crear_mapeo_servicios()
        self.mapeo_niveles = self._crear_mapeo_niveles()
        
    def _crear_mapeo_servicios(self):
        """Crear mapeo de capacidades a tipos de servicio."""
        return {
            'observacion': {
                'nombre': 'Observaci√≥n/Urgencias',
                'descripcion': 'Servicios de urgencias y observaci√≥n',
                'keywords': [
                    'observacion', 'observaci√≥n', 'urgencias', 'urgencia', 'emergencia', 'emergencias',
                    'camilla', 'camillas', 'consulta externa', 'triage', 'clasificacion',
                    'camilla de observacion', 'camilla observacion', 'emergencia adulto',
                    'emergencia pediatric', 'consulta', 'procedimientos', 'sala de procedimientos'
                ],
                'color': COLORS['warning']
            },
            'cuidado_critico': {
                'nombre': 'Cuidado Cr√≠tico',
                'descripcion': 'UCI y Cuidado Intermedio',
                'keywords': [
                    'uci', 'UCI', 'cuidado intensivo', 'cuidado intermedio', 'intensivo', 'intermedio',
                    'unidad de cuidado intensivo', 'unidad cuidado intermedio', 'cuidados intensivos',
                    'cuidados intermedios', 'critico', 'cr√≠tico', 'coronario', 'reanimacion'
                ],
                'color': COLORS['danger']
            },
            'hospitalizacion': {
                'nombre': 'Hospitalizaci√≥n',
                'descripcion': 'Servicios de hospitalizaci√≥n general',
                'keywords': [
                    'adulto', 'adultos', 'pediatric', 'pedi√°tric', 'pediatria', 'gineco', 'ginecologia',
                    'medicina', 'cirugia', 'cirug√≠a', 'general', 'hospitalizacion', 'hospitalizaci√≥n',
                    'cama', 'camas', 'internacion', 'internaci√≥n', 'sala', 'piso', 'habitacion',
                    'maternidad', 'obstetricia', 'neonatal', 'recien nacido', 'lactantes'
                ],
                'color': COLORS['primary']
            }
        }
    
    def _crear_mapeo_niveles(self):
        """Crear mapeo de niveles de atenci√≥n."""
        return {
            'I': {'nombre': 'Nivel I', 'descripcion': 'Baja complejidad', 'color': COLORS['success']},
            'II': {'nombre': 'Nivel II', 'descripcion': 'Mediana complejidad', 'color': COLORS['secondary']},
            'III': {'nombre': 'Nivel III', 'descripcion': 'Alta complejidad', 'color': COLORS['primary']},
            'IV': {'nombre': 'Nivel IV', 'descripcion': 'Muy alta complejidad', 'color': COLORS['danger']}
        }
    
    def _clasificar_servicio(self, nombre_capacidad):
        """Clasificar una capacidad en tipo de servicio."""
        nombre_lower = str(nombre_capacidad).lower()
        
        # Verificar observaci√≥n/urgencias
        for keyword in self.mapeo_servicios['observacion']['keywords']:
            if keyword in nombre_lower:
                return 'observacion'
        
        # Verificar cuidado cr√≠tico
        for keyword in self.mapeo_servicios['cuidado_critico']['keywords']:
            if keyword in nombre_lower:
                return 'cuidado_critico'
        
        # Por defecto, hospitalizaci√≥n
        return 'hospitalizacion'
    
    def _limpiar_nivel_atencion(self, nivel):
        """Limpiar y estandarizar el nivel de atenci√≥n."""
        if pd.isna(nivel):
            return 'N/A'
        
        nivel_str = str(nivel).strip().upper()
        
        # Extraer n√∫mero romano o ar√°bigo
        if 'I' in nivel_str and 'V' not in nivel_str:
            if nivel_str.count('I') == 1:
                return 'I'
            elif nivel_str.count('I') == 2:
                return 'II'
            elif nivel_str.count('I') == 3:
                return 'III'
        elif 'IV' in nivel_str or '4' in nivel_str:
            return 'IV'
        elif 'III' in nivel_str or '3' in nivel_str:
            return 'III'
        elif 'II' in nivel_str or '2' in nivel_str:
            return 'II'
        elif '1' in nivel_str:
            return 'I'
        
        return 'N/A'
    
    def cargar_datos(self, archivo_excel):
        """Cargar y procesar datos del archivo Excel."""
        try:
            print(f"üìÇ Cargando datos desde: {archivo_excel}")
            
            # Cargar datos
            self.df = pd.read_excel(archivo_excel)
            print(f"üìä Datos cargados: {len(self.df)} registros")
            
            # Verificar columnas esenciales
            columnas_requeridas = [
                'municipio_sede_prestador',
                'nombre_prestador', 
                'nivel_de_atencion_prestador',
                'nombre_sede_prestador',
                'nombre_capacidad_instalada',
                'cantidad_ci_TOTAL_REPS',
                'total_ingresos_paciente_servicio'
            ]
            
            columnas_faltantes = [col for col in columnas_requeridas if col not in self.df.columns]
            if columnas_faltantes:
                print(f"‚ùå Error: Columnas faltantes: {columnas_faltantes}")
                print(f"üìã Columnas disponibles: {list(self.df.columns)}")
                return False
            
            # Procesar datos
            self._procesar_datos()
            print("‚úÖ Datos procesados exitosamente")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error al cargar datos: {str(e)}")
            return False
    
    def _procesar_datos(self):
        """Procesar y limpiar los datos cargados."""
        print("üîÑ Procesando datos...")
        
        # Limpiar nombres de columnas
        self.df.columns = self.df.columns.str.strip()
        
        # Convertir valores num√©ricos
        self.df['cantidad_ci_TOTAL_REPS'] = pd.to_numeric(self.df['cantidad_ci_TOTAL_REPS'], errors='coerce').fillna(0)
        self.df['total_ingresos_paciente_servicio'] = pd.to_numeric(self.df['total_ingresos_paciente_servicio'], errors='coerce').fillna(0)
        
        # Calcular porcentaje de ocupaci√≥n
        self.df['porcentaje_ocupacion'] = np.where(
            self.df['cantidad_ci_TOTAL_REPS'] > 0,
            (self.df['total_ingresos_paciente_servicio'] / self.df['cantidad_ci_TOTAL_REPS']) * 100,
            0
        )
        
        # Calcular disponibilidad
        self.df['disponible'] = self.df['cantidad_ci_TOTAL_REPS'] - self.df['total_ingresos_paciente_servicio']
        self.df['disponible'] = self.df['disponible'].clip(lower=0)  # No puede ser negativo
        
        # Limpiar y estandarizar nombres
        self.df['municipio_sede_prestador'] = self.df['municipio_sede_prestador'].str.strip().str.title()
        self.df['nombre_prestador'] = self.df['nombre_prestador'].str.strip()
        self.df['nombre_sede_prestador'] = self.df['nombre_sede_prestador'].str.strip()
        self.df['nombre_capacidad_instalada'] = self.df['nombre_capacidad_instalada'].str.strip()
        
        # Limpiar nivel de atenci√≥n
        self.df['nivel_atencion_limpio'] = self.df['nivel_de_atencion_prestador'].apply(self._limpiar_nivel_atencion)
        
        # Asegurar que Ibagu√© est√© bien escrito
        self.df['municipio_sede_prestador'] = self.df['municipio_sede_prestador'].replace(
            ['Ibague', 'IBAGUE', 'ibague'], 'Ibagu√©'
        )
        
        # DEBUG: Mostrar tipos de capacidad instalada √∫nicos
        print("üîç TIPOS DE CAPACIDAD INSTALADA ENCONTRADOS:")
        tipos_unicos = self.df['nombre_capacidad_instalada'].unique()
        for i, tipo in enumerate(sorted(tipos_unicos), 1):
            print(f"   {i:2d}. {tipo}")
        print()
        
        # Clasificar por tipo de servicio
        self.df['tipo_servicio'] = self.df['nombre_capacidad_instalada'].apply(self._clasificar_servicio)
        
        # DEBUG: Mostrar clasificaci√≥n por servicio
        print("üìä CLASIFICACI√ìN POR TIPO DE SERVICIO:")
        clasificacion = self.df.groupby('tipo_servicio').agg({
            'cantidad_ci_TOTAL_REPS': 'sum',
            'total_ingresos_paciente_servicio': 'sum',
            'nombre_capacidad_instalada': 'nunique'
        }).reset_index()
        
        for _, row in clasificacion.iterrows():
            porcentaje = (row['total_ingresos_paciente_servicio'] / row['cantidad_ci_TOTAL_REPS'] * 100) if row['cantidad_ci_TOTAL_REPS'] > 0 else 0
            print(f"   üîπ {row['tipo_servicio'].upper()}:")
            print(f"      ‚Ä¢ Capacidad: {row['cantidad_ci_TOTAL_REPS']:,} unidades")
            print(f"      ‚Ä¢ Ocupaci√≥n: {row['total_ingresos_paciente_servicio']:,} pacientes ({porcentaje:.1f}%)")
            print(f"      ‚Ä¢ Tipos diferentes: {row['nombre_capacidad_instalada']}")
        print()
        
        # Crear identificadores √∫nicos
        self.df['prestador_sede'] = self.df['nombre_prestador'] + " - " + self.df['nombre_sede_prestador']
        
        print(f"üìä Procesamiento completado:")
        print(f"   üèòÔ∏è  Municipios: {self.df['municipio_sede_prestador'].nunique()}")
        print(f"   üè• Prestadores: {self.df['nombre_prestador'].nunique()}")
        print(f"   üè¢ Sedes: {self.df['nombre_sede_prestador'].nunique()}")
        print(f"   üìã Tipos de capacidad: {self.df['nombre_capacidad_instalada'].nunique()}")
        print(f"   üéØ Servicios: {self.df['tipo_servicio'].value_counts().to_dict()}")
        print(f"   üî¢ Niveles: {self.df['nivel_atencion_limpio'].value_counts().to_dict()}")
        print()
        
        # Verificar si hay datos para observaci√≥n/urgencias
        obs_data = self.df[self.df['tipo_servicio'] == 'observacion']
        if obs_data.empty:
            print("‚ö†Ô∏è  WARNING: No se encontraron datos para OBSERVACI√ìN/URGENCIAS")
            print("    Verificando keywords utilizadas...")
            
            # Mostrar algunos ejemplos que podr√≠an ser observaci√≥n
            ejemplos_posibles = []
            for tipo in tipos_unicos:
                tipo_lower = tipo.lower()
                if any(word in tipo_lower for word in ['observ', 'urgenc', 'emergen', 'camilla', 'consult']):
                    ejemplos_posibles.append(tipo)
            
            if ejemplos_posibles:
                print("    Posibles tipos que deber√≠an ser observaci√≥n:")
                for ejemplo in ejemplos_posibles[:5]:
                    print(f"      ‚Ä¢ {ejemplo}")
            print()
    
    def _obtener_estadisticas_tolima(self):
        """Obtener estad√≠sticas generales del departamento del Tolima."""
        stats = {}
        
        # Totales por tipo de servicio
        for tipo_servicio in self.mapeo_servicios.keys():
            df_servicio = self.df[self.df['tipo_servicio'] == tipo_servicio]
            
            stats[tipo_servicio] = {
                'capacidad_total': int(df_servicio['cantidad_ci_TOTAL_REPS'].sum()),
                'ocupacion_total': int(df_servicio['total_ingresos_paciente_servicio'].sum()),
                'disponible': int(df_servicio['disponible'].sum()),
                'municipios': df_servicio['municipio_sede_prestador'].nunique(),
                'prestadores': df_servicio['nombre_prestador'].nunique(),
                'sedes': df_servicio['nombre_sede_prestador'].nunique()
            }
            
            # Calcular porcentaje
            if stats[tipo_servicio]['capacidad_total'] > 0:
                stats[tipo_servicio]['porcentaje_ocupacion'] = round(
                    (stats[tipo_servicio]['ocupacion_total'] / stats[tipo_servicio]['capacidad_total']) * 100, 1
                )
            else:
                stats[tipo_servicio]['porcentaje_ocupacion'] = 0
        
        # Totales por nivel de atenci√≥n
        stats['niveles'] = {}
        for nivel in ['I', 'II', 'III', 'IV', 'N/A']:
            df_nivel = self.df[self.df['nivel_atencion_limpio'] == nivel]
            
            if len(df_nivel) > 0:
                stats['niveles'][nivel] = {
                    'capacidad_total': int(df_nivel['cantidad_ci_TOTAL_REPS'].sum()),
                    'ocupacion_total': int(df_nivel['total_ingresos_paciente_servicio'].sum()),
                    'disponible': int(df_nivel['disponible'].sum()),
                    'municipios': df_nivel['municipio_sede_prestador'].nunique(),
                    'prestadores': df_nivel['nombre_prestador'].nunique()
                }
                
                if stats['niveles'][nivel]['capacidad_total'] > 0:
                    stats['niveles'][nivel]['porcentaje_ocupacion'] = round(
                        (stats['niveles'][nivel]['ocupacion_total'] / stats['niveles'][nivel]['capacidad_total']) * 100, 1
                    )
                else:
                    stats['niveles'][nivel]['porcentaje_ocupacion'] = 0
        
        # Estad√≠sticas generales
        stats['general'] = {
            'total_municipios': self.df['municipio_sede_prestador'].nunique(),
            'total_prestadores': self.df['nombre_prestador'].nunique(),
            'total_sedes': self.df['nombre_sede_prestador'].nunique(),
            'capacidad_total_departamento': int(self.df['cantidad_ci_TOTAL_REPS'].sum()),
            'ocupacion_total_departamento': int(self.df['total_ingresos_paciente_servicio'].sum()),
            'disponible_total_departamento': int(self.df['disponible'].sum())
        }
        
        if stats['general']['capacidad_total_departamento'] > 0:
            stats['general']['porcentaje_ocupacion_departamento'] = round(
                (stats['general']['ocupacion_total_departamento'] / stats['general']['capacidad_total_departamento']) * 100, 1
            )
        else:
            stats['general']['porcentaje_ocupacion_departamento'] = 0
        
        return stats
    
    def _obtener_estadisticas_ibague(self):
        """Obtener estad√≠sticas espec√≠ficas de Ibagu√©."""
        df_ibague = self.df[self.df['municipio_sede_prestador'] == 'Ibagu√©']
        
        if df_ibague.empty:
            return None
        
        stats = {}
        
        # Por tipo de servicio
        for tipo_servicio in self.mapeo_servicios.keys():
            df_servicio = df_ibague[df_ibague['tipo_servicio'] == tipo_servicio]
            
            stats[tipo_servicio] = {
                'capacidad_total': int(df_servicio['cantidad_ci_TOTAL_REPS'].sum()),
                'ocupacion_total': int(df_servicio['total_ingresos_paciente_servicio'].sum()),
                'disponible': int(df_servicio['disponible'].sum()),
                'prestadores': df_servicio['nombre_prestador'].nunique(),
                'sedes': df_servicio['nombre_sede_prestador'].nunique()
            }
            
            if stats[tipo_servicio]['capacidad_total'] > 0:
                stats[tipo_servicio]['porcentaje_ocupacion'] = round(
                    (stats[tipo_servicio]['ocupacion_total'] / stats[tipo_servicio]['capacidad_total']) * 100, 1
                )
            else:
                stats[tipo_servicio]['porcentaje_ocupacion'] = 0
        
        # Por nivel de atenci√≥n
        stats['niveles'] = {}
        for nivel in ['I', 'II', 'III', 'IV', 'N/A']:
            df_nivel = df_ibague[df_ibague['nivel_atencion_limpio'] == nivel]
            
            if len(df_nivel) > 0:
                stats['niveles'][nivel] = {
                    'capacidad_total': int(df_nivel['cantidad_ci_TOTAL_REPS'].sum()),
                    'ocupacion_total': int(df_nivel['total_ingresos_paciente_servicio'].sum()),
                    'disponible': int(df_nivel['disponible'].sum()),
                    'prestadores': df_nivel['nombre_prestador'].nunique(),
                    'sedes': df_nivel['nombre_sede_prestador'].nunique()
                }
                
                if stats['niveles'][nivel]['capacidad_total'] > 0:
                    stats['niveles'][nivel]['porcentaje_ocupacion'] = round(
                        (stats['niveles'][nivel]['ocupacion_total'] / stats['niveles'][nivel]['capacidad_total']) * 100, 1
                    )
                else:
                    stats['niveles'][nivel]['porcentaje_ocupacion'] = 0
        
        # Totales de Ibagu√©
        stats['total'] = {
            'capacidad_total': int(df_ibague['cantidad_ci_TOTAL_REPS'].sum()),
            'ocupacion_total': int(df_ibague['total_ingresos_paciente_servicio'].sum()),
            'disponible': int(df_ibague['disponible'].sum()),
            'prestadores': df_ibague['nombre_prestador'].nunique(),
            'sedes': df_ibague['nombre_sede_prestador'].nunique()
        }
        
        if stats['total']['capacidad_total'] > 0:
            stats['total']['porcentaje_ocupacion'] = round(
                (stats['total']['ocupacion_total'] / stats['total']['capacidad_total']) * 100, 1
            )
        else:
            stats['total']['porcentaje_ocupacion'] = 0
        
        return stats
    
    def _obtener_estadisticas_federico_lleras(self):
        """Obtener estad√≠sticas espec√≠ficas del Hospital Federico Lleras Acosta."""
        # Buscar variaciones del nombre
        nombres_federico = [
            'FEDERICO LLERAS ACOSTA', 'Federico Lleras Acosta', 'federico lleras acosta',
            'HOSPITAL FEDERICO LLERAS', 'Hospital Federico Lleras', 'hospital federico lleras',
            'FEDERICO LLERAS', 'Federico Lleras', 'federico lleras',
            'LLERAS ACOSTA', 'Lleras Acosta', 'lleras acosta',
            'HFL', 'HFLLA'
        ]
        
        df_federico = None
        nombre_encontrado = None
        
        # Buscar el prestador con alguno de estos nombres
        for nombre in nombres_federico:
            df_temp = self.df[self.df['nombre_prestador'].str.contains(nombre, case=False, na=False)]
            if not df_temp.empty:
                df_federico = df_temp
                nombre_encontrado = nombre
                break
        
        if df_federico is None or df_federico.empty:
            return None
        
        stats = {'nombre_encontrado': nombre_encontrado}
        
        # Por tipo de servicio
        for tipo_servicio in self.mapeo_servicios.keys():
            df_servicio = df_federico[df_federico['tipo_servicio'] == tipo_servicio]
            
            stats[tipo_servicio] = {
                'capacidad_total': int(df_servicio['cantidad_ci_TOTAL_REPS'].sum()),
                'ocupacion_total': int(df_servicio['total_ingresos_paciente_servicio'].sum()),
                'disponible': int(df_servicio['disponible'].sum()),
                'sedes': df_servicio['nombre_sede_prestador'].nunique(),
                'tipos_capacidad': df_servicio['nombre_capacidad_instalada'].nunique()
            }
            
            if stats[tipo_servicio]['capacidad_total'] > 0:
                stats[tipo_servicio]['porcentaje_ocupacion'] = round(
                    (stats[tipo_servicio]['ocupacion_total'] / stats[tipo_servicio]['capacidad_total']) * 100, 1
                )
            else:
                stats[tipo_servicio]['porcentaje_ocupacion'] = 0
        
        # Por nivel de atenci√≥n
        stats['niveles'] = {}
        for nivel in ['I', 'II', 'III', 'IV', 'N/A']:
            df_nivel = df_federico[df_federico['nivel_atencion_limpio'] == nivel]
            
            if len(df_nivel) > 0:
                stats['niveles'][nivel] = {
                    'capacidad_total': int(df_nivel['cantidad_ci_TOTAL_REPS'].sum()),
                    'ocupacion_total': int(df_nivel['total_ingresos_paciente_servicio'].sum()),
                    'disponible': int(df_nivel['disponible'].sum()),
                    'sedes': df_nivel['nombre_sede_prestador'].nunique(),
                    'tipos_capacidad': df_nivel['nombre_capacidad_instalada'].nunique()
                }
                
                if stats['niveles'][nivel]['capacidad_total'] > 0:
                    stats['niveles'][nivel]['porcentaje_ocupacion'] = round(
                        (stats['niveles'][nivel]['ocupacion_total'] / stats['niveles'][nivel]['capacidad_total']) * 100, 1
                    )
                else:
                    stats['niveles'][nivel]['porcentaje_ocupacion'] = 0
        
        # Totales del Federico Lleras
        stats['total'] = {
            'capacidad_total': int(df_federico['cantidad_ci_TOTAL_REPS'].sum()),
            'ocupacion_total': int(df_federico['total_ingresos_paciente_servicio'].sum()),
            'disponible': int(df_federico['disponible'].sum()),
            'sedes': df_federico['nombre_sede_prestador'].nunique(),
            'municipios': df_federico['municipio_sede_prestador'].nunique(),
            'tipos_capacidad': df_federico['nombre_capacidad_instalada'].nunique()
        }
        
        if stats['total']['capacidad_total'] > 0:
            stats['total']['porcentaje_ocupacion'] = round(
                (stats['total']['ocupacion_total'] / stats['total']['capacidad_total']) * 100, 1
            )
        else:
            stats['total']['porcentaje_ocupacion'] = 0
        
        # Detalles por sede
        stats['sedes'] = []
        for sede in df_federico['nombre_sede_prestador'].unique():
            df_sede = df_federico[df_federico['nombre_sede_prestador'] == sede]
            
            sede_stats = {
                'nombre': sede,
                'municipio': df_sede['municipio_sede_prestador'].iloc[0] if len(df_sede) > 0 else 'N/A',
                'nivel': df_sede['nivel_atencion_limpio'].mode().iloc[0] if len(df_sede['nivel_atencion_limpio'].mode()) > 0 else 'N/A',
                'capacidad_total': int(df_sede['cantidad_ci_TOTAL_REPS'].sum()),
                'ocupacion_total': int(df_sede['total_ingresos_paciente_servicio'].sum()),
                'disponible': int(df_sede['disponible'].sum()),
                'tipos_capacidad': df_sede['nombre_capacidad_instalada'].nunique()
            }
            
            if sede_stats['capacidad_total'] > 0:
                sede_stats['porcentaje_ocupacion'] = round(
                    (sede_stats['ocupacion_total'] / sede_stats['capacidad_total']) * 100, 1
                )
            else:
                sede_stats['porcentaje_ocupacion'] = 0
            
            # Por servicio en esta sede
            for tipo_servicio in self.mapeo_servicios.keys():
                df_servicio_sede = df_sede[df_sede['tipo_servicio'] == tipo_servicio]
                cap = int(df_servicio_sede['cantidad_ci_TOTAL_REPS'].sum())
                ocup = int(df_servicio_sede['total_ingresos_paciente_servicio'].sum())
                
                sede_stats[f'{tipo_servicio}_capacidad'] = cap
                sede_stats[f'{tipo_servicio}_ocupacion'] = ocup
                sede_stats[f'{tipo_servicio}_porcentaje'] = round((ocup / cap * 100), 1) if cap > 0 else 0
            
            stats['sedes'].append(sede_stats)
        
        return stats
    
    def _obtener_estadisticas_otros_municipios(self):
        """Obtener estad√≠sticas de municipios diferentes a Ibagu√©."""
        df_otros = self.df[self.df['municipio_sede_prestador'] != 'Ibagu√©']
        
        if df_otros.empty:
            return None
        
        # Agrupar por municipio
        stats_municipios = []
        
        for municipio in df_otros['municipio_sede_prestador'].unique():
            df_municipio = df_otros[df_otros['municipio_sede_prestador'] == municipio]
            
            municipio_stats = {
                'municipio': municipio,
                'prestadores': df_municipio['nombre_prestador'].nunique(),
                'sedes': df_municipio['nombre_sede_prestador'].nunique(),
                'niveles_atencion': list(df_municipio['nivel_atencion_limpio'].unique())
            }
            
            # Por tipo de servicio
            for tipo_servicio in self.mapeo_servicios.keys():
                df_servicio = df_municipio[df_municipio['tipo_servicio'] == tipo_servicio]
                
                capacidad = int(df_servicio['cantidad_ci_TOTAL_REPS'].sum())
                ocupacion = int(df_servicio['total_ingresos_paciente_servicio'].sum())
                disponible = int(df_servicio['disponible'].sum())
                
                municipio_stats[f'{tipo_servicio}_capacidad'] = capacidad
                municipio_stats[f'{tipo_servicio}_ocupacion'] = ocupacion
                municipio_stats[f'{tipo_servicio}_disponible'] = disponible
                municipio_stats[f'{tipo_servicio}_porcentaje'] = round(
                    (ocupacion / capacidad * 100) if capacidad > 0 else 0, 1
                )
            
            # Totales del municipio
            municipio_stats['total_capacidad'] = int(df_municipio['cantidad_ci_TOTAL_REPS'].sum())
            municipio_stats['total_ocupacion'] = int(df_municipio['total_ingresos_paciente_servicio'].sum())
            municipio_stats['total_disponible'] = int(df_municipio['disponible'].sum())
            municipio_stats['total_porcentaje'] = round(
                (municipio_stats['total_ocupacion'] / municipio_stats['total_capacidad'] * 100)
                if municipio_stats['total_capacidad'] > 0 else 0, 1
            )
            
            stats_municipios.append(municipio_stats)
        
        return sorted(stats_municipios, key=lambda x: x['total_capacidad'], reverse=True)
    
    def mostrar_debug_clasificacion(self):
        """Funci√≥n de debugging para mostrar c√≥mo se est√°n clasificando los tipos de capacidad."""
        if self.df is None:
            print("‚ùå No hay datos cargados para mostrar debug")
            return
        
        print("üîç" + "="*80)
        print("   DEBUG: AN√ÅLISIS DE CLASIFICACI√ìN POR TIPOS DE SERVICIO")
        print("="*82)
        
        # Mostrar keywords usadas
        print("üìã KEYWORDS UTILIZADAS PARA CLASIFICACI√ìN:")
        for tipo_servicio, info in self.mapeo_servicios.items():
            print(f"   üîπ {info['nombre'].upper()}:")
            keywords_str = ", ".join(info['keywords'])
            print(f"      Keywords: {keywords_str}")
        print()
        
        # Mostrar tipos √∫nicos y su clasificaci√≥n
        print("üìä TIPOS DE CAPACIDAD Y SU CLASIFICACI√ìN:")
        tipos_clasificacion = []
        
        for tipo in sorted(self.df['nombre_capacidad_instalada'].unique()):
            clasificacion = self._clasificar_servicio(tipo)
            capacidad = self.df[self.df['nombre_capacidad_instalada'] == tipo]['cantidad_ci_TOTAL_REPS'].sum()
            ocupacion = self.df[self.df['nombre_capacidad_instalada'] == tipo]['total_ingresos_paciente_servicio'].sum()
            
            tipos_clasificacion.append({
                'tipo': tipo,
                'clasificacion': clasificacion,
                'capacidad': capacidad,
                'ocupacion': ocupacion
            })
        
        # Agrupar por clasificaci√≥n
        for servicio in ['observacion', 'cuidado_critico', 'hospitalizacion']:
            tipos_servicio = [t for t in tipos_clasificacion if t['clasificacion'] == servicio]
            
            if tipos_servicio:
                print(f"   üîπ {self.mapeo_servicios[servicio]['nombre'].upper()}:")
                for tipo in tipos_servicio:
                    print(f"      ‚Ä¢ {tipo['tipo']} ‚Üí Cap: {tipo['capacidad']}, Ocup: {tipo['ocupacion']}")
            else:
                print(f"   ‚ùå {self.mapeo_servicios[servicio]['nombre'].upper()}: SIN DATOS")
        
        print("="*82)
        
        # Sugerencias para observaci√≥n si est√° vac√≠a
        obs_data = self.df[self.df['tipo_servicio'] == 'observacion']
        if obs_data.empty:
            print("üí° SUGERENCIAS PARA OBSERVACI√ìN/URGENCIAS:")
            print("   Si no se est√°n clasificando correctamente los tipos de observaci√≥n,")
            print("   revise estos tipos que podr√≠an ser observaci√≥n:")
            
            posibles_obs = []
            for tipo in self.df['nombre_capacidad_instalada'].unique():
                tipo_lower = tipo.lower()
                if any(word in tipo_lower for word in ['camilla', 'consulta', 'proced', 'emerg']):
                    posibles_obs.append(tipo)
            
            for tipo in posibles_obs[:10]:
                print(f"      ‚Ä¢ {tipo}")
            print()
    
    def generar_informe_pdf(self, archivo_salida=None):
        """Generar el informe PDF con la nueva estructura."""
        if archivo_salida is None:
            timestamp = self.fecha_procesamiento.strftime("%Y%m%d_%H%M%S")
            archivo_salida = f"informe_tolima_servicios_{timestamp}.pdf"
        
        print(f"üìÑ Generando informe PDF: {archivo_salida}")
        
        # Configurar documento
        doc = SimpleDocTemplate(archivo_salida, pagesize=A4,
                              rightMargin=0.5*inch, leftMargin=0.5*inch,
                              topMargin=0.5*inch, bottomMargin=0.5*inch)
        
        # Elementos del documento
        elementos = []
        
        # Estilos
        estilos = getSampleStyleSheet()
        
        titulo_principal = ParagraphStyle(
            'TituloPrincipal',
            parent=estilos['Title'],
            fontSize=18,
            spaceAfter=30,
            textColor=colors.HexColor(COLORS['primary']),
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        )
        
        titulo_seccion = ParagraphStyle(
            'TituloSeccion',
            parent=estilos['Heading1'],
            fontSize=14,
            spaceAfter=15,
            textColor=colors.HexColor(COLORS['primary']),
            fontName='Helvetica-Bold'
        )
        
        titulo_subseccion = ParagraphStyle(
            'TituloSubseccion',
            parent=estilos['Heading2'],
            fontSize=12,
            spaceAfter=10,
            textColor=colors.HexColor(COLORS['accent']),
            fontName='Helvetica-Bold'
        )
        
        texto_normal = ParagraphStyle(
            'TextoNormal',
            parent=estilos['Normal'],
            fontSize=10,
            spaceAfter=10,
            alignment=TA_JUSTIFY
        )
        
        # ======================================================================
        # PORTADA
        # ======================================================================
        elementos.append(Spacer(1, 1*inch))
        
        elementos.append(Paragraph("INFORME DE CAPACIDAD HOSPITALARIA", titulo_principal))
        elementos.append(Paragraph("DEPARTAMENTO DEL TOLIMA", titulo_principal))
        elementos.append(Paragraph("An√°lisis por Tipos de Servicio y Niveles de Atenci√≥n", titulo_seccion))
        
        elementos.append(Spacer(1, 0.5*inch))
        
        fecha_str = self.fecha_procesamiento.strftime("%d de %B de %Y")
        elementos.append(Paragraph(f"<b>Fecha de Procesamiento:</b> {fecha_str}", texto_normal))
        elementos.append(Paragraph(f"<b>Secretar√≠a de Salud del Tolima</b>", texto_normal))
        elementos.append(Paragraph(f"<b>Sistema de Monitoreo Hospitalario</b>", texto_normal))
        
        elementos.append(PageBreak())
        
        # ======================================================================
        # 1. RESUMEN EJECUTIVO DEL TOLIMA
        # ======================================================================
        elementos.append(Paragraph("1. RESUMEN EJECUTIVO - DEPARTAMENTO DEL TOLIMA", titulo_seccion))
        
        stats_tolima = self._obtener_estadisticas_tolima()
        
        elementos.append(Paragraph("üìä <b>Estad√≠sticas Generales del Departamento</b>", titulo_subseccion))
        
        resumen_texto = f"""
        <b>Cobertura Territorial:</b><br/>
        ‚Ä¢ Total de municipios con reporte: {stats_tolima['general']['total_municipios']}<br/>
        ‚Ä¢ Prestadores de salud activos: {stats_tolima['general']['total_prestadores']}<br/>
        ‚Ä¢ Sedes hospitalarias registradas: {stats_tolima['general']['total_sedes']}<br/><br/>
        
        <b>Capacidad Hospitalaria Departamental:</b><br/>
        ‚Ä¢ Capacidad total instalada: {stats_tolima['general']['capacidad_total_departamento']:,} unidades<br/>
        ‚Ä¢ Ocupaci√≥n actual: {stats_tolima['general']['ocupacion_total_departamento']:,} pacientes<br/>
        ‚Ä¢ Unidades disponibles: {stats_tolima['general']['disponible_total_departamento']:,}<br/>
        ‚Ä¢ Porcentaje de ocupaci√≥n: {stats_tolima['general']['porcentaje_ocupacion_departamento']}%<br/><br/>
        """
        
        elementos.append(Paragraph(resumen_texto, texto_normal))
        
        # Estad√≠sticas por tipo de servicio
        elementos.append(Paragraph("üè• <b>An√°lisis por Tipos de Servicio</b>", titulo_subseccion))
        
        for tipo_servicio, info in self.mapeo_servicios.items():
            if tipo_servicio in stats_tolima:
                stats = stats_tolima[tipo_servicio]
                
                # Determinar estado
                porcentaje = stats['porcentaje_ocupacion']
                if porcentaje >= UMBRALES['critico']:
                    estado = "üî¥ CR√çTICO"
                    estado_desc = "requiere atenci√≥n inmediata"
                elif porcentaje >= UMBRALES['advertencia']:
                    estado = "üü° ADVERTENCIA"
                    estado_desc = "requiere monitoreo"
                else:
                    estado = "üü¢ NORMAL"
                    estado_desc = "funcionando dentro de par√°metros normales"
                
                servicio_texto = f"""
                <b>{info['nombre']} - {estado}</b><br/>
                ‚Ä¢ Capacidad instalada: {stats['capacidad_total']:,} unidades<br/>
                ‚Ä¢ Ocupaci√≥n actual: {stats['ocupacion_total']:,} pacientes ({stats['porcentaje_ocupacion']}%)<br/>
                ‚Ä¢ Unidades disponibles: {stats['disponible']:,}<br/>
                ‚Ä¢ Municipios con este servicio: {stats['municipios']}<br/>
                ‚Ä¢ Prestadores: {stats['prestadores']} | Sedes: {stats['sedes']}<br/>
                ‚Ä¢ Estado: <i>{estado_desc}</i><br/><br/>
                """
                
                elementos.append(Paragraph(servicio_texto, texto_normal))
        
        # Estad√≠sticas por nivel de atenci√≥n
        elementos.append(Paragraph("üéØ <b>An√°lisis por Niveles de Atenci√≥n</b>", titulo_subseccion))
        
        for nivel, info in self.mapeo_niveles.items():
            if nivel in stats_tolima['niveles']:
                stats = stats_tolima['niveles'][nivel]
                
                porcentaje = stats['porcentaje_ocupacion']
                if porcentaje >= UMBRALES['critico']:
                    estado = "üî¥"
                elif porcentaje >= UMBRALES['advertencia']:
                    estado = "üü°"
                else:
                    estado = "üü¢"
                
                nivel_texto = f"""
                <b>{estado} {info['nombre']} ({info['descripcion']})</b><br/>
                ‚Ä¢ Capacidad: {stats['capacidad_total']:,} unidades | Ocupaci√≥n: {stats['ocupacion_total']:,} ({stats['porcentaje_ocupacion']}%)<br/>
                ‚Ä¢ Municipios: {stats['municipios']} | Prestadores: {stats['prestadores']}<br/>
                """
                
                elementos.append(Paragraph(nivel_texto, texto_normal))
        
        # Agregar informaci√≥n de N/A si existe
        if 'N/A' in stats_tolima['niveles']:
            stats = stats_tolima['niveles']['N/A']
            elementos.append(Paragraph(f"""
            <b>‚ö™ Sin Clasificar de Nivel</b><br/>
            ‚Ä¢ Capacidad: {stats['capacidad_total']:,} unidades | Ocupaci√≥n: {stats['ocupacion_total']:,} ({stats['porcentaje_ocupacion']}%)<br/>
            ‚Ä¢ Municipios: {stats['municipios']} | Prestadores: {stats['prestadores']}<br/>
            """, texto_normal))
        
        elementos.append(PageBreak())
        
        # ======================================================================
        # 2. AN√ÅLISIS DETALLADO DE IBAGU√â
        # ======================================================================
        elementos.append(Paragraph("2. AN√ÅLISIS DETALLADO - IBAGU√â (CAPITAL)", titulo_seccion))
        
        stats_ibague = self._obtener_estadisticas_ibague()
        
        if stats_ibague:
            elementos.append(Paragraph("üèõÔ∏è <b>Ibagu√© como Centro de Referencia Departamental</b>", titulo_subseccion))
            
            # Calcular participaci√≥n de Ibagu√©
            total_cap_ibague = stats_ibague['total']['capacidad_total']
            total_ocup_ibague = stats_ibague['total']['ocupacion_total']
            porcentaje_ibague = stats_ibague['total']['porcentaje_ocupacion']
            
            participacion_capacidad = round((total_cap_ibague / stats_tolima['general']['capacidad_total_departamento'] * 100), 1)
            participacion_ocupacion = round((total_ocup_ibague / stats_tolima['general']['ocupacion_total_departamento'] * 100), 1)
            
            resumen_ibague = f"""
            <b>Participaci√≥n de Ibagu√© en el Sistema Departamental:</b><br/>
            ‚Ä¢ Participaci√≥n en capacidad total: {participacion_capacidad}% del departamento<br/>
            ‚Ä¢ Participaci√≥n en ocupaci√≥n: {participacion_ocupacion}% del departamento<br/>
            ‚Ä¢ Capacidad total de Ibagu√©: {total_cap_ibague:,} unidades<br/>
            ‚Ä¢ Ocupaci√≥n actual: {total_ocup_ibague:,} pacientes ({porcentaje_ibague}%)<br/>
            ‚Ä¢ Unidades disponibles: {stats_ibague['total']['disponible']:,}<br/>
            ‚Ä¢ Total de prestadores: {stats_ibague['total']['prestadores']}<br/>
            ‚Ä¢ Total de sedes: {stats_ibague['total']['sedes']}<br/><br/>
            """
            
            elementos.append(Paragraph(resumen_ibague, texto_normal))
            
            # An√°lisis por servicio en Ibagu√©
            elementos.append(Paragraph("üìã <b>Detalle por Tipo de Servicio en Ibagu√©</b>", titulo_subseccion))
            
            for tipo_servicio, info in self.mapeo_servicios.items():
                if tipo_servicio in stats_ibague:
                    stats = stats_ibague[tipo_servicio]
                    
                    participacion_servicio = round((stats['capacidad_total'] / total_cap_ibague * 100), 1) if total_cap_ibague > 0 else 0
                    
                    # Estado del servicio
                    porcentaje = stats['porcentaje_ocupacion']
                    if porcentaje >= UMBRALES['critico']:
                        estado = "üî¥ CR√çTICO"
                    elif porcentaje >= UMBRALES['advertencia']:
                        estado = "üü° ADVERTENCIA"
                    else:
                        estado = "üü¢ NORMAL"
                    
                    servicio_ibague = f"""
                    <b>{info['nombre']} - {estado}</b><br/>
                    ‚Ä¢ Prestadores: {stats['prestadores']} | Sedes: {stats['sedes']}<br/>
                    ‚Ä¢ Capacidad: {stats['capacidad_total']:,} unidades ({participacion_servicio}% del total de Ibagu√©)<br/>
                    ‚Ä¢ Ocupaci√≥n: {stats['ocupacion_total']:,} pacientes ({stats['porcentaje_ocupacion']}%)<br/>
                    ‚Ä¢ Disponibles: {stats['disponible']:,} unidades<br/><br/>
                    """
                    
                    elementos.append(Paragraph(servicio_ibague, texto_normal))
        
        elementos.append(PageBreak())
        
        # ======================================================================
        # 2.1. AN√ÅLISIS ESPEC√çFICO DEL HOSPITAL FEDERICO LLERAS ACOSTA
        # ======================================================================
        elementos.append(Paragraph("2.1. AN√ÅLISIS ESPEC√çFICO - HOSPITAL FEDERICO LLERAS ACOSTA", titulo_seccion))
        
        stats_federico = self._obtener_estadisticas_federico_lleras()
        
        if stats_federico:
            elementos.append(Paragraph("üè• <b>Hospital Federico Lleras Acosta - Centro de Referencia Departamental</b>", titulo_subseccion))
            
            # Informaci√≥n general del Federico Lleras
            total_cap_federico = stats_federico['total']['capacidad_total']
            total_ocup_federico = stats_federico['total']['ocupacion_total']
            porcentaje_federico = stats_federico['total']['porcentaje_ocupacion']
            
            # Calcular participaci√≥n respecto al total departamental
            participacion_federico_dept = round((total_cap_federico / stats_tolima['general']['capacidad_total_departamento'] * 100), 1)
            
            # Calcular participaci√≥n respecto a Ibagu√© (si existe)
            participacion_federico_ibague = 0
            if stats_ibague:
                participacion_federico_ibague = round((total_cap_federico / stats_ibague['total']['capacidad_total'] * 100), 1)
            
            resumen_federico = f"""
            <b>Posicionamiento del Hospital Federico Lleras Acosta:</b><br/>
            ‚Ä¢ Participaci√≥n en capacidad departamental: {participacion_federico_dept}% del total del Tolima<br/>"""
            
            if stats_ibague:
                resumen_federico += f"‚Ä¢ Participaci√≥n en capacidad de Ibagu√©: {participacion_federico_ibague}% del total de la capital<br/>"
            
            resumen_federico += f"""‚Ä¢ Capacidad total: {total_cap_federico:,} unidades hospitalarias<br/>
            ‚Ä¢ Ocupaci√≥n actual: {total_ocup_federico:,} pacientes ({porcentaje_federico}%)<br/>
            ‚Ä¢ Unidades disponibles: {stats_federico['total']['disponible']:,}<br/>
            ‚Ä¢ N√∫mero de sedes: {stats_federico['total']['sedes']}<br/>
            ‚Ä¢ Municipios donde opera: {stats_federico['total']['municipios']}<br/>
            ‚Ä¢ Tipos de capacidad diferentes: {stats_federico['total']['tipos_capacidad']}<br/><br/>
            """
            
            elementos.append(Paragraph(resumen_federico, texto_normal))
            
            # An√°lisis por servicio en el Federico Lleras
            elementos.append(Paragraph("üìã <b>Detalle por Tipo de Servicio - Federico Lleras</b>", titulo_subseccion))
            
            for tipo_servicio, info in self.mapeo_servicios.items():
                if tipo_servicio in stats_federico and stats_federico[tipo_servicio]['capacidad_total'] > 0:
                    stats = stats_federico[tipo_servicio]
                    
                    participacion_servicio = round((stats['capacidad_total'] / total_cap_federico * 100), 1) if total_cap_federico > 0 else 0
                    
                    # Estado del servicio
                    porcentaje = stats['porcentaje_ocupacion']
                    if porcentaje >= UMBRALES['critico']:
                        estado = "üî¥ CR√çTICO"
                    elif porcentaje >= UMBRALES['advertencia']:
                        estado = "üü° ADVERTENCIA"
                    else:
                        estado = "üü¢ NORMAL"
                    
                    servicio_federico = f"""
                    <b>{info['nombre']} - {estado}</b><br/>
                    ‚Ä¢ Sedes con este servicio: {stats['sedes']}<br/>
                    ‚Ä¢ Capacidad: {stats['capacidad_total']:,} unidades ({participacion_servicio}% del total del hospital)<br/>
                    ‚Ä¢ Ocupaci√≥n: {stats['ocupacion_total']:,} pacientes ({stats['porcentaje_ocupacion']}%)<br/>
                    ‚Ä¢ Disponibles: {stats['disponible']:,} unidades<br/>
                    ‚Ä¢ Tipos de capacidad: {stats['tipos_capacidad']}<br/><br/>
                    """
                    
                    elementos.append(Paragraph(servicio_federico, texto_normal))
        else:
            elementos.append(Paragraph("‚ö†Ô∏è <b>Hospital Federico Lleras Acosta no encontrado en los datos</b>", titulo_subseccion))
            elementos.append(Paragraph("No se pudo localizar el Hospital Federico Lleras Acosta en los datos proporcionados. Verifique el nombre del prestador en el archivo de datos.", texto_normal))
        
        elementos.append(PageBreak())
        
        # ======================================================================
        # 3. AN√ÅLISIS DE OTROS MUNICIPIOS
        # ======================================================================
        elementos.append(Paragraph("3. AN√ÅLISIS DE OTROS MUNICIPIOS DEL TOLIMA", titulo_seccion))
        
        stats_otros = self._obtener_estadisticas_otros_municipios()
        
        if stats_otros:
            # Resumen de otros municipios
            total_otros_cap = sum(m['total_capacidad'] for m in stats_otros)
            total_otros_ocup = sum(m['total_ocupacion'] for m in stats_otros)
            porcentaje_otros = round((total_otros_ocup / total_otros_cap * 100), 1) if total_otros_cap > 0 else 0
            
            municipios_criticos = [m for m in stats_otros if m['total_porcentaje'] >= UMBRALES['critico']]
            municipios_advertencia = [m for m in stats_otros if UMBRALES['advertencia'] <= m['total_porcentaje'] < UMBRALES['critico']]
            
            resumen_otros = f"""
            <b>Panorama de Municipios (Excluyendo Ibagu√©):</b><br/>
            ‚Ä¢ Total de municipios analizados: {len(stats_otros)}<br/>
            ‚Ä¢ Capacidad total combinada: {total_otros_cap:,} unidades<br/>
            ‚Ä¢ Ocupaci√≥n total: {total_otros_ocup:,} pacientes ({porcentaje_otros}%)<br/>
            ‚Ä¢ Municipios en estado cr√≠tico (‚â•90%): {len(municipios_criticos)}<br/>
            ‚Ä¢ Municipios en advertencia (70-89%): {len(municipios_advertencia)}<br/><br/>
            """
            
            elementos.append(Paragraph(resumen_otros, texto_normal))
            
            # Alertas cr√≠ticas
            if municipios_criticos:
                elementos.append(Paragraph("üö® <b>MUNICIPIOS EN ESTADO CR√çTICO</b>", titulo_subseccion))
                
                for municipio in municipios_criticos:
                    alerta_texto = f"""
                    <b>{municipio['municipio']}</b> - {municipio['total_porcentaje']}% de ocupaci√≥n<br/>
                    ‚Ä¢ Capacidad: {municipio['total_capacidad']} | Ocupaci√≥n: {municipio['total_ocupacion']}<br/>
                    ‚Ä¢ Prestadores: {municipio['prestadores']} | Sedes: {municipio['sedes']}<br/>
                    ‚Ä¢ Niveles de atenci√≥n: {", ".join(municipio['niveles_atencion']) if municipio['niveles_atencion'] else "N/A"}<br/><br/>
                    """
                    elementos.append(Paragraph(alerta_texto, texto_normal))
        
        # ======================================================================
        # 4. CONCLUSIONES Y RECOMENDACIONES
        # ======================================================================
        elementos.append(PageBreak())
        elementos.append(Paragraph("4. CONCLUSIONES Y RECOMENDACIONES", titulo_seccion))
        
        # Generar conclusiones autom√°ticas
        conclusiones = self._generar_conclusiones(stats_tolima, stats_ibague, stats_otros)
        elementos.append(Paragraph(conclusiones, texto_normal))
        
        # Pie de p√°gina
        elementos.append(Spacer(1, 1*inch))
        pie_texto = f"""
        <b>Informe generado por:</b> Sistema de Monitoreo Hospitalario<br/>
        <b>Secretar√≠a de Salud del Tolima</b><br/>
        <b>Fecha y hora:</b> {self.fecha_procesamiento.strftime("%d/%m/%Y %H:%M:%S")}<br/>
        <b>Desarrollado por:</b> Ing. Jos√© Miguel Santos<br/>
        <b>Registros procesados:</b> {len(self.df):,} unidades de capacidad instalada
        """
        elementos.append(Paragraph(pie_texto, texto_normal))
        
        # Construir documento
        try:
            doc.build(elementos)
            print(f"‚úÖ Informe PDF generado exitosamente: {archivo_salida}")
            return archivo_salida
        except Exception as e:
            print(f"‚ùå Error generando PDF: {str(e)}")
            import traceback
            traceback.print_exc()
            return None
    
    def _generar_conclusiones(self, stats_tolima, stats_ibague, stats_otros):
        """Generar conclusiones autom√°ticas basadas en los datos."""
        conclusiones = []
        
        # An√°lisis departamental
        porcentaje_dept = stats_tolima['general']['porcentaje_ocupacion_departamento']
        if porcentaje_dept >= UMBRALES['critico']:
            conclusiones.append("üî¥ <b>SITUACI√ìN CR√çTICA DEPARTAMENTAL:</b> El Tolima presenta una ocupaci√≥n hospitalaria cr√≠tica que requiere activaci√≥n de protocolos de emergencia y redistribuci√≥n de pacientes.")
        elif porcentaje_dept >= UMBRALES['advertencia']:
            conclusiones.append("üü° <b>SITUACI√ìN DE ADVERTENCIA:</b> El departamento del Tolima requiere monitoreo constante y preparaci√≥n de medidas preventivas.")
        else:
            conclusiones.append("üü¢ <b>SITUACI√ìN CONTROLADA:</b> El sistema hospitalario del Tolima opera dentro de par√°metros normales.")
        
        # An√°lisis por servicios
        servicios_criticos = []
        for tipo_servicio, info in self.mapeo_servicios.items():
            if tipo_servicio in stats_tolima:
                porcentaje = stats_tolima[tipo_servicio]['porcentaje_ocupacion']
                if porcentaje >= UMBRALES['critico']:
                    servicios_criticos.append(info['nombre'])
        
        if servicios_criticos:
            conclusiones.append(f"‚ö†Ô∏è <b>SERVICIOS CR√çTICOS:</b> {', '.join(servicios_criticos)} presentan ocupaci√≥n cr√≠tica y requieren atenci√≥n inmediata.")
        
        # An√°lisis por niveles de atenci√≥n
        niveles_criticos = []
        for nivel, info in self.mapeo_niveles.items():
            if nivel in stats_tolima['niveles']:
                porcentaje = stats_tolima['niveles'][nivel]['porcentaje_ocupacion']
                if porcentaje >= UMBRALES['critico']:
                    niveles_criticos.append(info['nombre'])
        
        if niveles_criticos:
            conclusiones.append(f"üéØ <b>NIVELES CR√çTICOS:</b> {', '.join(niveles_criticos)} requieren refuerzo inmediato de recursos.")
        
        # An√°lisis de Ibagu√©
        if stats_ibague:
            total_cap_ibague = stats_ibague['total']['capacidad_total']
            participacion = round((total_cap_ibague / stats_tolima['general']['capacidad_total_departamento'] * 100), 1)
            conclusiones.append(f"üèõÔ∏è <b>PAPEL DE IBAGU√â:</b> Como capital concentra el {participacion}% de la capacidad hospitalaria departamental, siendo el principal centro de referencia con {stats_ibague['total']['prestadores']} prestadores y {stats_ibague['total']['sedes']} sedes.")
        
        # An√°lisis de municipios
        if stats_otros:
            municipios_criticos = [m for m in stats_otros if m['total_porcentaje'] >= UMBRALES['critico']]
            if municipios_criticos:
                nombres = ", ".join([m['municipio'] for m in municipios_criticos[:3]])
                if len(municipios_criticos) > 3:
                    nombres += f" y {len(municipios_criticos)-3} m√°s"
                conclusiones.append(f"üö® <b>MUNICIPIOS CR√çTICOS:</b> {nombres} requieren apoyo inmediato de la red departamental.")
        
        # Recomendaciones
        recomendaciones = [
            "<br/>üìã <b>RECOMENDACIONES INMEDIATAS:</b>",
            "‚Ä¢ Activar protocolos de referencia y contrarreferencia entre municipios",
            "‚Ä¢ Fortalecer la coordinaci√≥n entre Ibagu√© y municipios perif√©ricos",
            "‚Ä¢ Implementar monitoreo en tiempo real de ocupaci√≥n por servicios y niveles",
            "‚Ä¢ Preparar planes de contingencia para redistribuci√≥n de pacientes",
            "‚Ä¢ Reforzar personal m√©dico en servicios con mayor ocupaci√≥n",
            "‚Ä¢ Evaluar ampliaci√≥n de capacidad en niveles de alta complejidad",
            "‚Ä¢ Mejorar la clasificaci√≥n de niveles de atenci√≥n en prestadores sin clasificar"
        ]
        
        return "<br/>".join(conclusiones + ["<br/>"] + recomendaciones)


def main():
    """Funci√≥n principal del programa."""
    print("üè•" + "="*70)
    print("   GENERADOR DE INFORMES DE CAPACIDAD HOSPITALARIA")
    print("           DEPARTAMENTO DEL TOLIMA - POR SERVICIOS")
    print("="*72)
    print("   Desarrollado por: Ing. Jos√© Miguel Santos")
    print("   Para: Secretar√≠a de Salud del Tolima")
    print("="*72)
    
    # Verificar argumentos
    if len(sys.argv) < 2:
        print("üìã USO DEL PROGRAMA:")
        print("   python hospital_report.py <archivo_excel> [archivo_salida.pdf]")
        print("   python hospital_report.py <archivo_excel> --debug")
        print("")
        print("üìä EJEMPLOS:")
        print("   python hospital_report.py datos_hospitalarios.xlsx")
        print("   python hospital_report.py datos_hospitalarios.xlsx informe_tolima.pdf")
        print("   python hospital_report.py datos_hospitalarios.xlsx --debug")
        print("")
        print("üîß CARACTER√çSTICAS PRINCIPALES:")
        print("   ‚úÖ An√°lisis por tipos de servicio (Observaci√≥n, Cr√≠tico, Hospitalizaci√≥n)")
        print("   ‚úÖ An√°lisis por niveles de atenci√≥n (I, II, III, IV)")
        print("   ‚úÖ Estructura: Tolima ‚Üí Ibagu√© ‚Üí Federico Lleras ‚Üí Otros Municipios")
        print("   ‚úÖ Gr√°ficos optimizados y proporcionales")
        print("   ‚úÖ Tablas detalladas por prestador y sede")
        print("   ‚úÖ Alertas autom√°ticas por umbrales de ocupaci√≥n")
        print("   ‚úÖ An√°lisis espec√≠fico del Hospital Federico Lleras Acosta")
        print("")
        print("üîç MODO DEBUG:")
        print("   Usar --debug para ver c√≥mo se clasifican los tipos de capacidad")
        print("   √ötil para diagnosticar problemas de clasificaci√≥n")
        print("")
        print("üìã COLUMNAS REQUERIDAS EN EL ARCHIVO EXCEL:")
        print("   ‚Ä¢ municipio_sede_prestador: Municipio del departamento")
        print("   ‚Ä¢ nombre_prestador: Prestador de salud")
        print("   ‚Ä¢ nivel_de_atencion_prestador: Nivel de complejidad")
        print("   ‚Ä¢ nombre_sede_prestador: Nombre de la sede")
        print("   ‚Ä¢ nombre_capacidad_instalada: Tipo de cama/camilla")
        print("   ‚Ä¢ cantidad_ci_TOTAL_REPS: Capacidad total")
        print("   ‚Ä¢ total_ingresos_paciente_servicio: Pacientes ingresados")
        return
    
    archivo_excel = sys.argv[1]
    
    # Verificar modo debug
    modo_debug = len(sys.argv) > 2 and sys.argv[2] == '--debug'
    archivo_salida = None if modo_debug else (sys.argv[2] if len(sys.argv) > 2 else None)
    
    # Verificar que el archivo existe
    if not os.path.exists(archivo_excel):
        print(f"‚ùå Error: El archivo '{archivo_excel}' no existe.")
        return
    
    # Crear generador de informes
    generador = HospitalReportGenerator()
    
    try:
        # Cargar datos
        if not generador.cargar_datos(archivo_excel):
            print("‚ùå Error al cargar los datos. Verifique el formato del archivo.")
            return
        
        # Modo debug
        if modo_debug:
            generador.mostrar_debug_clasificacion()
            return
        
        # Generar informe (versi√≥n simplificada por ahora)
        archivo_generado = generador.generar_informe_pdf(archivo_salida)
        
        if archivo_generado:
            print("üéâ" + "="*70)
            print("‚úÖ PROCESAMIENTO COMPLETADO")
            print(f"üìÑ Los datos fueron procesados correctamente")
            print(f"üìä Datos procesados: {len(generador.df):,} registros")
            print(f"üè• Municipios: {generador.df['municipio_sede_prestador'].nunique()}")
            print(f"üèõÔ∏è Prestadores: {generador.df['nombre_prestador'].nunique()}")
            print(f"üìç Sedes: {generador.df['nombre_sede_prestador'].nunique()}")
            print(f"üéØ Servicios analizados: {list(generador.df['tipo_servicio'].unique())}")
            print(f"üî¢ Niveles de atenci√≥n: {list(generador.df['nivel_atencion_limpio'].unique())}")
            
            # Verificar si se encontr√≥ el Federico Lleras
            stats_federico = generador._obtener_estadisticas_federico_lleras()
            if stats_federico:
                print(f"üè• Hospital Federico Lleras: ‚úÖ ENCONTRADO ({stats_federico['total']['capacidad_total']:,} unidades)")
            else:
                print(f"üè• Hospital Federico Lleras: ‚ùå NO ENCONTRADO")
            
            print("="*72)
            
            # Verificar si hay problemas con la clasificaci√≥n
            obs_data = generador.df[generador.df['tipo_servicio'] == 'observacion']
            if obs_data.empty:
                print("‚ö†Ô∏è  ADVERTENCIA: No se encontraron datos para Observaci√≥n/Urgencias")
                print("   üí° Ejecute con --debug para diagnosticar: python hospital_report.py archivo.xlsx --debug")
        else:
            print("‚ùå Error al generar el informe.")
            
    except Exception as e:
        print(f"‚ùå Error inesperado: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()